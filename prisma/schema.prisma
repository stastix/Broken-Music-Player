datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model Album {
  albumId       String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  artist        Artist?   @relation(fields: [artistAlbumId], references: [albumId])
  image         String?
  songs         Song[]
  createdAt     DateTime  @default(now())
  userId        String?   @db.ObjectId
  postId        String?   @db.ObjectId
  Comment       Comment[]
  artistAlbumId String?   @db.ObjectId
}

model Artist {
  albumId String  @id @default(auto()) @map("_id") @db.ObjectId
  Album   Album[]
  name    String
  image   String?
}

model Song {
  songId  String @id @default(auto()) @map("_id") @db.ObjectId
  title   String
  album   Album  @relation(fields: [albumId], references: [albumId])
  albumId String @db.ObjectId
  length  Int
}

model VerificationRequest {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

model Comment {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  text         String
  album        Album   @relation(fields: [albumAlbumId], references: [albumId])
  userId       String? @db.ObjectId
  albumAlbumId String  @db.ObjectId
}
